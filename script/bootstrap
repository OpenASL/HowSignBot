#!/bin/sh
# script/bootstrap: Resolve all dependencies that the application requires to run.
set -euo pipefail

if [ -z "${CI:-}" ]; then
  name=${PWD##*/}
  # If python version is passed as first argument, use that, otherwise use 3.9
  python_version=${1:-3.9.0}
  echo "==> Bootstrapping a Python $python_version environment called $name..."
  eval "$(pyenv init -)"
  if ! [ -d "${PYENV_ROOT:-$HOME/.pyenv}/versions/$name" ]; then
    pyenv install "$python_version" --skip-existing
    pyenv virtualenv "$python_version" "$name"
  fi
  unset name python_version
fi

# XXX Workaround to get psycopg2 to install properly on macOS
if grep --quiet 'psycopg2' -- 'requirements.txt' && [ "$(uname -s)" = "Darwin" ]; then
  echo "==> Installing psycopg2..."
  LDFLAGS=-L/usr/local/opt/openssl/lib python -m pip install -q $(grep 'psycopg2' -- 'requirements.txt')
fi

if [ -f requirements-dev.txt ]; then
  echo "==> Installing/updating from requirements-dev.txt..."
  python -m pip install -q -U -r requirements-dev.txt
elif [ -f requirements.txt ]; then
  echo "==> Installing/updating from requirements.txt..."
  python -m pip install -q -U -r requirements.txt
fi

if [ -f .pre-commit-config.yaml ]; then
  echo "==> Installing/updating pre-commit..."
  python -m pip install -q -U pre-commit
  echo "==> Installing/updating pre-commit hook..."
  pre-commit install -f
fi

if [ -f .env.example ] && [ ! -f .env ]; then
  echo "==> Copying .env.example to .env..."
  cp .env.example .env
fi

if [ -f docker-compose.yml ]; then
  echo "==> Starting containers..."
  docker-compose up -d
fi

if [ -f setup.py ]; then
  echo "==> Installing from setup.py..."
  python -m pip install -q -e '.'
fi

echo "==> Bootstrapping finished."
